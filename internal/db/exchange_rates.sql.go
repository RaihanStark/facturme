// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: exchange_rates.sql

package db

import (
	"context"
	"database/sql"
)

const deleteOldExchangeRates = `-- name: DeleteOldExchangeRates :exec
DELETE FROM exchange_rates
WHERE updated_at < $1
`

func (q *Queries) DeleteOldExchangeRates(ctx context.Context, updatedAt sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, deleteOldExchangeRates, updatedAt)
	return err
}

const getAllExchangeRates = `-- name: GetAllExchangeRates :many
SELECT id, base_currency, target_currency, rate, updated_at
FROM exchange_rates
ORDER BY base_currency, target_currency
`

func (q *Queries) GetAllExchangeRates(ctx context.Context) ([]ExchangeRate, error) {
	rows, err := q.db.QueryContext(ctx, getAllExchangeRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExchangeRate
	for rows.Next() {
		var i ExchangeRate
		if err := rows.Scan(
			&i.ID,
			&i.BaseCurrency,
			&i.TargetCurrency,
			&i.Rate,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExchangeRate = `-- name: GetExchangeRate :one
SELECT id, base_currency, target_currency, rate, updated_at
FROM exchange_rates
WHERE base_currency = $1 AND target_currency = $2
`

type GetExchangeRateParams struct {
	BaseCurrency   string `json:"base_currency"`
	TargetCurrency string `json:"target_currency"`
}

func (q *Queries) GetExchangeRate(ctx context.Context, arg GetExchangeRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, getExchangeRate, arg.BaseCurrency, arg.TargetCurrency)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.TargetCurrency,
		&i.Rate,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertExchangeRate = `-- name: UpsertExchangeRate :exec
INSERT INTO exchange_rates (base_currency, target_currency, rate, updated_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (base_currency, target_currency)
DO UPDATE SET rate = $3, updated_at = NOW()
`

type UpsertExchangeRateParams struct {
	BaseCurrency   string `json:"base_currency"`
	TargetCurrency string `json:"target_currency"`
	Rate           string `json:"rate"`
}

func (q *Queries) UpsertExchangeRate(ctx context.Context, arg UpsertExchangeRateParams) error {
	_, err := q.db.ExecContext(ctx, upsertExchangeRate, arg.BaseCurrency, arg.TargetCurrency, arg.Rate)
	return err
}
