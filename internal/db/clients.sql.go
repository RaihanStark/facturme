// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (user_id, name, email, phone, company, address, hourly_rate, currency)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, name, email, phone, company, address, hourly_rate, currency, created_at, updated_at
`

type CreateClientParams struct {
	UserID     int32          `json:"user_id"`
	Name       string         `json:"name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Company    sql.NullString `json:"company"`
	Address    sql.NullString `json:"address"`
	HourlyRate sql.NullString `json:"hourly_rate"`
	Currency   string         `json:"currency"`
}

type CreateClientRow struct {
	ID         int32          `json:"id"`
	UserID     int32          `json:"user_id"`
	Name       string         `json:"name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Company    sql.NullString `json:"company"`
	Address    sql.NullString `json:"address"`
	HourlyRate sql.NullString `json:"hourly_rate"`
	Currency   string         `json:"currency"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (CreateClientRow, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Company,
		arg.Address,
		arg.HourlyRate,
		arg.Currency,
	)
	var i CreateClientRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Address,
		&i.HourlyRate,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = $1 AND user_id = $2
`

type DeleteClientParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteClient(ctx context.Context, arg DeleteClientParams) error {
	_, err := q.db.ExecContext(ctx, deleteClient, arg.ID, arg.UserID)
	return err
}

const deleteDemoClients = `-- name: DeleteDemoClients :exec
DELETE FROM clients
WHERE user_id = $1 AND (name LIKE '%ðŸŽ­%' OR name LIKE '%(Demo)%')
`

func (q *Queries) DeleteDemoClients(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDemoClients, userID)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, user_id, name, email, phone, company, address, hourly_rate, currency, created_at, updated_at
FROM clients
WHERE id = $1 AND user_id = $2
`

type GetClientByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

type GetClientByIDRow struct {
	ID         int32          `json:"id"`
	UserID     int32          `json:"user_id"`
	Name       string         `json:"name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Company    sql.NullString `json:"company"`
	Address    sql.NullString `json:"address"`
	HourlyRate sql.NullString `json:"hourly_rate"`
	Currency   string         `json:"currency"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetClientByID(ctx context.Context, arg GetClientByIDParams) (GetClientByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, arg.ID, arg.UserID)
	var i GetClientByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Address,
		&i.HourlyRate,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClientsByUserID = `-- name: GetClientsByUserID :many
SELECT id, user_id, name, email, phone, company, address, hourly_rate, currency, created_at, updated_at
FROM clients
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetClientsByUserIDRow struct {
	ID         int32          `json:"id"`
	UserID     int32          `json:"user_id"`
	Name       string         `json:"name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Company    sql.NullString `json:"company"`
	Address    sql.NullString `json:"address"`
	HourlyRate sql.NullString `json:"hourly_rate"`
	Currency   string         `json:"currency"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetClientsByUserID(ctx context.Context, userID int32) ([]GetClientsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getClientsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsByUserIDRow
	for rows.Next() {
		var i GetClientsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Company,
			&i.Address,
			&i.HourlyRate,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET name = $3, email = $4, phone = $5, company = $6, address = $7, hourly_rate = $8, currency = $9, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, email, phone, company, address, hourly_rate, currency, created_at, updated_at
`

type UpdateClientParams struct {
	ID         int32          `json:"id"`
	UserID     int32          `json:"user_id"`
	Name       string         `json:"name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Company    sql.NullString `json:"company"`
	Address    sql.NullString `json:"address"`
	HourlyRate sql.NullString `json:"hourly_rate"`
	Currency   string         `json:"currency"`
}

type UpdateClientRow struct {
	ID         int32          `json:"id"`
	UserID     int32          `json:"user_id"`
	Name       string         `json:"name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Company    sql.NullString `json:"company"`
	Address    sql.NullString `json:"address"`
	HourlyRate sql.NullString `json:"hourly_rate"`
	Currency   string         `json:"currency"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (UpdateClientRow, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Company,
		arg.Address,
		arg.HourlyRate,
		arg.Currency,
	)
	var i UpdateClientRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Address,
		&i.HourlyRate,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
