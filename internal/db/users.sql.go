// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const changePassword = `-- name: ChangePassword :one
UPDATE users
SET password_hash = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type ChangePasswordParams struct {
	ID           int32          `json:"id"`
	PasswordHash sql.NullString `json:"password_hash"`
}

type ChangePasswordRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) (ChangePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, changePassword, arg.ID, arg.PasswordHash)
	var i ChangePasswordRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const completeOnboarding = `-- name: CompleteOnboarding :one
UPDATE users
SET onboarding_completed = TRUE,
    currency = $2,
    date_format = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type CompleteOnboardingParams struct {
	ID         int32          `json:"id"`
	Currency   sql.NullString `json:"currency"`
	DateFormat sql.NullString `json:"date_format"`
}

type CompleteOnboardingRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CompleteOnboarding(ctx context.Context, arg CompleteOnboardingParams) (CompleteOnboardingRow, error) {
	row := q.db.QueryRowContext(ctx, completeOnboarding, arg.ID, arg.Currency, arg.DateFormat)
	var i CompleteOnboardingRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const completeTour = `-- name: CompleteTour :one
UPDATE users
SET tour_completed = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type CompleteTourRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CompleteTour(ctx context.Context, id int32) (CompleteTourRow, error) {
	row := q.db.QueryRowContext(ctx, completeTour, id)
	var i CompleteTourRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, name, verification_token, verification_token_expires)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type CreateUserParams struct {
	Email                    string         `json:"email"`
	PasswordHash             sql.NullString `json:"password_hash"`
	Name                     string         `json:"name"`
	VerificationToken        sql.NullString `json:"verification_token"`
	VerificationTokenExpires sql.NullTime   `json:"verification_token_expires"`
}

type CreateUserRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.Name,
		arg.VerificationToken,
		arg.VerificationTokenExpires,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	PasswordHash        sql.NullString `json:"password_hash"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPasswordResetToken = `-- name: GetUserByPasswordResetToken :one
SELECT id, email, name, password_reset_token_expires
FROM users
WHERE password_reset_token = $1
`

type GetUserByPasswordResetTokenRow struct {
	ID                        int32        `json:"id"`
	Email                     string       `json:"email"`
	Name                      string       `json:"name"`
	PasswordResetTokenExpires sql.NullTime `json:"password_reset_token_expires"`
}

func (q *Queries) GetUserByPasswordResetToken(ctx context.Context, passwordResetToken sql.NullString) (GetUserByPasswordResetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPasswordResetToken, passwordResetToken)
	var i GetUserByPasswordResetTokenRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordResetTokenExpires,
	)
	return i, err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, email, name, email_verified, verification_token_expires, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
FROM users
WHERE verification_token = $1
`

type GetUserByVerificationTokenRow struct {
	ID                       int32          `json:"id"`
	Email                    string         `json:"email"`
	Name                     string         `json:"name"`
	EmailVerified            sql.NullBool   `json:"email_verified"`
	VerificationTokenExpires sql.NullTime   `json:"verification_token_expires"`
	OnboardingCompleted      sql.NullBool   `json:"onboarding_completed"`
	TourCompleted            sql.NullBool   `json:"tour_completed"`
	Currency                 sql.NullString `json:"currency"`
	DateFormat               sql.NullString `json:"date_format"`
	CreatedAt                sql.NullTime   `json:"created_at"`
	UpdatedAt                sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetUserByVerificationToken(ctx context.Context, verificationToken sql.NullString) (GetUserByVerificationTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByVerificationToken, verificationToken)
	var i GetUserByVerificationTokenRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.VerificationTokenExpires,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetPassword = `-- name: ResetPassword :one
UPDATE users
SET password_hash = $2,
    password_reset_token = NULL,
    password_reset_token_expires = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type ResetPasswordParams struct {
	ID           int32          `json:"id"`
	PasswordHash sql.NullString `json:"password_hash"`
}

type ResetPasswordRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) (ResetPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, resetPassword, arg.ID, arg.PasswordHash)
	var i ResetPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePasswordResetToken = `-- name: UpdatePasswordResetToken :one
UPDATE users
SET password_reset_token = $2,
    password_reset_token_expires = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE email = $1
RETURNING id, email, name
`

type UpdatePasswordResetTokenParams struct {
	Email                     string         `json:"email"`
	PasswordResetToken        sql.NullString `json:"password_reset_token"`
	PasswordResetTokenExpires sql.NullTime   `json:"password_reset_token_expires"`
}

type UpdatePasswordResetTokenRow struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

func (q *Queries) UpdatePasswordResetToken(ctx context.Context, arg UpdatePasswordResetTokenParams) (UpdatePasswordResetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, updatePasswordResetToken, arg.Email, arg.PasswordResetToken, arg.PasswordResetTokenExpires)
	var i UpdatePasswordResetTokenRow
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const updateUserCurrency = `-- name: UpdateUserCurrency :one
UPDATE users
SET currency = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type UpdateUserCurrencyParams struct {
	ID       int32          `json:"id"`
	Currency sql.NullString `json:"currency"`
}

type UpdateUserCurrencyRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateUserCurrency(ctx context.Context, arg UpdateUserCurrencyParams) (UpdateUserCurrencyRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserCurrency, arg.ID, arg.Currency)
	var i UpdateUserCurrencyRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVerificationToken = `-- name: UpdateVerificationToken :one
UPDATE users
SET verification_token = $2,
    verification_token_expires = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND email_verified = FALSE
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type UpdateVerificationTokenParams struct {
	ID                       int32          `json:"id"`
	VerificationToken        sql.NullString `json:"verification_token"`
	VerificationTokenExpires sql.NullTime   `json:"verification_token_expires"`
}

type UpdateVerificationTokenRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateVerificationToken(ctx context.Context, arg UpdateVerificationTokenParams) (UpdateVerificationTokenRow, error) {
	row := q.db.QueryRowContext(ctx, updateVerificationToken, arg.ID, arg.VerificationToken, arg.VerificationTokenExpires)
	var i UpdateVerificationTokenRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :one
UPDATE users
SET email_verified = TRUE,
    verification_token = NULL,
    verification_token_expires = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, email_verified, onboarding_completed, tour_completed, currency, date_format, created_at, updated_at
`

type VerifyUserEmailRow struct {
	ID                  int32          `json:"id"`
	Email               string         `json:"email"`
	Name                string         `json:"name"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	OnboardingCompleted sql.NullBool   `json:"onboarding_completed"`
	TourCompleted       sql.NullBool   `json:"tour_completed"`
	Currency            sql.NullString `json:"currency"`
	DateFormat          sql.NullString `json:"date_format"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) VerifyUserEmail(ctx context.Context, id int32) (VerifyUserEmailRow, error) {
	row := q.db.QueryRowContext(ctx, verifyUserEmail, id)
	var i VerifyUserEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.EmailVerified,
		&i.OnboardingCompleted,
		&i.TourCompleted,
		&i.Currency,
		&i.DateFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
