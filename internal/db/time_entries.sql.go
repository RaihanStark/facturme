// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: time_entries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTimeEntry = `-- name: CreateTimeEntry :one
INSERT INTO time_entries (user_id, client_id, date, hours, description, hourly_rate)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, client_id, date, hours, description, hourly_rate, created_at, updated_at
`

type CreateTimeEntryParams struct {
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
}

type CreateTimeEntryRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateTimeEntry(ctx context.Context, arg CreateTimeEntryParams) (CreateTimeEntryRow, error) {
	row := q.db.QueryRowContext(ctx, createTimeEntry,
		arg.UserID,
		arg.ClientID,
		arg.Date,
		arg.Hours,
		arg.Description,
		arg.HourlyRate,
	)
	var i CreateTimeEntryRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Date,
		&i.Hours,
		&i.Description,
		&i.HourlyRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTimeEntry = `-- name: DeleteTimeEntry :exec
DELETE FROM time_entries
WHERE id = $1 AND user_id = $2
`

type DeleteTimeEntryParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteTimeEntry(ctx context.Context, arg DeleteTimeEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteTimeEntry, arg.ID, arg.UserID)
	return err
}

const getDetailedTimeEntriesByDateRange = `-- name: GetDetailedTimeEntriesByDateRange :many
SELECT id, user_id, client_id, date, hours, description, hourly_rate, created_at, updated_at
FROM time_entries
WHERE user_id = $1 AND date >= $2 AND date <= $3
ORDER BY date DESC, created_at DESC
`

type GetDetailedTimeEntriesByDateRangeParams struct {
	UserID int32     `json:"user_id"`
	Date   time.Time `json:"date"`
	Date_2 time.Time `json:"date_2"`
}

type GetDetailedTimeEntriesByDateRangeRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetDetailedTimeEntriesByDateRange(ctx context.Context, arg GetDetailedTimeEntriesByDateRangeParams) ([]GetDetailedTimeEntriesByDateRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getDetailedTimeEntriesByDateRange, arg.UserID, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDetailedTimeEntriesByDateRangeRow
	for rows.Next() {
		var i GetDetailedTimeEntriesByDateRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.Date,
			&i.Hours,
			&i.Description,
			&i.HourlyRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeEntriesByClientID = `-- name: GetTimeEntriesByClientID :many
SELECT id, user_id, client_id, date, hours, description, hourly_rate, created_at, updated_at
FROM time_entries
WHERE client_id = $1 AND user_id = $2
ORDER BY date DESC, created_at DESC
`

type GetTimeEntriesByClientIDParams struct {
	ClientID int32 `json:"client_id"`
	UserID   int32 `json:"user_id"`
}

type GetTimeEntriesByClientIDRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetTimeEntriesByClientID(ctx context.Context, arg GetTimeEntriesByClientIDParams) ([]GetTimeEntriesByClientIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeEntriesByClientID, arg.ClientID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeEntriesByClientIDRow
	for rows.Next() {
		var i GetTimeEntriesByClientIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.Date,
			&i.Hours,
			&i.Description,
			&i.HourlyRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeEntriesByDateRange = `-- name: GetTimeEntriesByDateRange :many
SELECT date, CAST(SUM(CAST(hours AS DECIMAL)) AS TEXT) as total_hours
FROM time_entries
WHERE user_id = $1 AND date >= $2 AND date <= $3
GROUP BY date
ORDER BY date ASC
`

type GetTimeEntriesByDateRangeParams struct {
	UserID int32     `json:"user_id"`
	Date   time.Time `json:"date"`
	Date_2 time.Time `json:"date_2"`
}

type GetTimeEntriesByDateRangeRow struct {
	Date       time.Time `json:"date"`
	TotalHours string    `json:"total_hours"`
}

func (q *Queries) GetTimeEntriesByDateRange(ctx context.Context, arg GetTimeEntriesByDateRangeParams) ([]GetTimeEntriesByDateRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeEntriesByDateRange, arg.UserID, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeEntriesByDateRangeRow
	for rows.Next() {
		var i GetTimeEntriesByDateRangeRow
		if err := rows.Scan(&i.Date, &i.TotalHours); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeEntriesByUserID = `-- name: GetTimeEntriesByUserID :many
SELECT id, user_id, client_id, date, hours, description, hourly_rate, created_at, updated_at
FROM time_entries
WHERE user_id = $1
ORDER BY date DESC, created_at DESC
`

type GetTimeEntriesByUserIDRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetTimeEntriesByUserID(ctx context.Context, userID int32) ([]GetTimeEntriesByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeEntriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeEntriesByUserIDRow
	for rows.Next() {
		var i GetTimeEntriesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.Date,
			&i.Hours,
			&i.Description,
			&i.HourlyRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeEntryByID = `-- name: GetTimeEntryByID :one
SELECT id, user_id, client_id, date, hours, description, hourly_rate, created_at, updated_at
FROM time_entries
WHERE id = $1 AND user_id = $2
`

type GetTimeEntryByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

type GetTimeEntryByIDRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetTimeEntryByID(ctx context.Context, arg GetTimeEntryByIDParams) (GetTimeEntryByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTimeEntryByID, arg.ID, arg.UserID)
	var i GetTimeEntryByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Date,
		&i.Hours,
		&i.Description,
		&i.HourlyRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTimeEntry = `-- name: UpdateTimeEntry :one
UPDATE time_entries
SET client_id = $3, date = $4, hours = $5, description = $6, hourly_rate = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, client_id, date, hours, description, hourly_rate, created_at, updated_at
`

type UpdateTimeEntryParams struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
}

type UpdateTimeEntryRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateTimeEntry(ctx context.Context, arg UpdateTimeEntryParams) (UpdateTimeEntryRow, error) {
	row := q.db.QueryRowContext(ctx, updateTimeEntry,
		arg.ID,
		arg.UserID,
		arg.ClientID,
		arg.Date,
		arg.Hours,
		arg.Description,
		arg.HourlyRate,
	)
	var i UpdateTimeEntryRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Date,
		&i.Hours,
		&i.Description,
		&i.HourlyRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
