// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoices.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addTimeEntryToInvoice = `-- name: AddTimeEntryToInvoice :exec
INSERT INTO invoice_time_entries (invoice_id, time_entry_id)
VALUES ($1, $2)
`

type AddTimeEntryToInvoiceParams struct {
	InvoiceID   int32 `json:"invoice_id"`
	TimeEntryID int32 `json:"time_entry_id"`
}

func (q *Queries) AddTimeEntryToInvoice(ctx context.Context, arg AddTimeEntryToInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, addTimeEntryToInvoice, arg.InvoiceID, arg.TimeEntryID)
	return err
}

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (user_id, client_id, invoice_number, issue_date, due_date, status, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, client_id, invoice_number, issue_date, due_date, status, notes, created_at, updated_at
`

type CreateInvoiceParams struct {
	UserID        int32          `json:"user_id"`
	ClientID      int32          `json:"client_id"`
	InvoiceNumber string         `json:"invoice_number"`
	IssueDate     time.Time      `json:"issue_date"`
	DueDate       time.Time      `json:"due_date"`
	Status        string         `json:"status"`
	Notes         sql.NullString `json:"notes"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.UserID,
		arg.ClientID,
		arg.InvoiceNumber,
		arg.IssueDate,
		arg.DueDate,
		arg.Status,
		arg.Notes,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.InvoiceNumber,
		&i.IssueDate,
		&i.DueDate,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices
WHERE id = $1 AND user_id = $2
`

type DeleteInvoiceParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteInvoice(ctx context.Context, arg DeleteInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, arg.ID, arg.UserID)
	return err
}

const getAvailableTimeEntriesForClient = `-- name: GetAvailableTimeEntriesForClient :many
SELECT te.id, te.user_id, te.client_id, te.date, te.hours, te.description, te.hourly_rate, te.created_at, te.updated_at
FROM time_entries te
WHERE te.client_id = $1
  AND te.user_id = $2
  AND NOT EXISTS (
    SELECT 1 FROM invoice_time_entries ite WHERE ite.time_entry_id = te.id
  )
ORDER BY te.date DESC
`

type GetAvailableTimeEntriesForClientParams struct {
	ClientID int32 `json:"client_id"`
	UserID   int32 `json:"user_id"`
}

type GetAvailableTimeEntriesForClientRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetAvailableTimeEntriesForClient(ctx context.Context, arg GetAvailableTimeEntriesForClientParams) ([]GetAvailableTimeEntriesForClientRow, error) {
	rows, err := q.db.QueryContext(ctx, getAvailableTimeEntriesForClient, arg.ClientID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAvailableTimeEntriesForClientRow
	for rows.Next() {
		var i GetAvailableTimeEntriesForClientRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.Date,
			&i.Hours,
			&i.Description,
			&i.HourlyRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT id, user_id, client_id, invoice_number, issue_date, due_date, status, notes, created_at, updated_at
FROM invoices
WHERE id = $1 AND user_id = $2
`

type GetInvoiceByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetInvoiceByID(ctx context.Context, arg GetInvoiceByIDParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByID, arg.ID, arg.UserID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.InvoiceNumber,
		&i.IssueDate,
		&i.DueDate,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoiceTimeEntries = `-- name: GetInvoiceTimeEntries :many
SELECT te.id, te.user_id, te.client_id, te.date, te.hours, te.description, te.hourly_rate, te.created_at, te.updated_at
FROM time_entries te
INNER JOIN invoice_time_entries ite ON te.id = ite.time_entry_id
WHERE ite.invoice_id = $1
`

type GetInvoiceTimeEntriesRow struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	ClientID    int32          `json:"client_id"`
	Date        time.Time      `json:"date"`
	Hours       string         `json:"hours"`
	Description sql.NullString `json:"description"`
	HourlyRate  sql.NullString `json:"hourly_rate"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetInvoiceTimeEntries(ctx context.Context, invoiceID int32) ([]GetInvoiceTimeEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getInvoiceTimeEntries, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoiceTimeEntriesRow
	for rows.Next() {
		var i GetInvoiceTimeEntriesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.Date,
			&i.Hours,
			&i.Description,
			&i.HourlyRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoicesByUserID = `-- name: GetInvoicesByUserID :many
SELECT id, user_id, client_id, invoice_number, issue_date, due_date, status, notes, created_at, updated_at
FROM invoices
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetInvoicesByUserID(ctx context.Context, userID int32) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, getInvoicesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.InvoiceNumber,
			&i.IssueDate,
			&i.DueDate,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices
SET client_id = $3, invoice_number = $4, issue_date = $5, due_date = $6, status = $7, notes = $8, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, client_id, invoice_number, issue_date, due_date, status, notes, created_at, updated_at
`

type UpdateInvoiceParams struct {
	ID            int32          `json:"id"`
	UserID        int32          `json:"user_id"`
	ClientID      int32          `json:"client_id"`
	InvoiceNumber string         `json:"invoice_number"`
	IssueDate     time.Time      `json:"issue_date"`
	DueDate       time.Time      `json:"due_date"`
	Status        string         `json:"status"`
	Notes         sql.NullString `json:"notes"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoice,
		arg.ID,
		arg.UserID,
		arg.ClientID,
		arg.InvoiceNumber,
		arg.IssueDate,
		arg.DueDate,
		arg.Status,
		arg.Notes,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.InvoiceNumber,
		&i.IssueDate,
		&i.DueDate,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInvoiceStatus = `-- name: UpdateInvoiceStatus :one
UPDATE invoices
SET status = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, client_id, invoice_number, issue_date, due_date, status, notes, created_at, updated_at
`

type UpdateInvoiceStatusParams struct {
	ID     int32  `json:"id"`
	UserID int32  `json:"user_id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateInvoiceStatus(ctx context.Context, arg UpdateInvoiceStatusParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStatus, arg.ID, arg.UserID, arg.Status)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.InvoiceNumber,
		&i.IssueDate,
		&i.DueDate,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
